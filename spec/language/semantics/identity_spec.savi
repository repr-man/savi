:module IdentitySpec
  :fun run(test MicroTest)
    test["string literal ==="].pass = "example" === "example"
    test["string literal !=="].pass = "example" !== "differs"
    test["identity_digest_of string literal =="].pass =
      (identity_digest_of "example") == (identity_digest_of "example")
    test["identity_digest_of string literal !="].pass =
      (identity_digest_of "example") != (identity_digest_of "differs")

    class_inst_a = Container(String).new("example")
    class_inst_b = Container(String).new("example")
    test["class ==="].pass = class_inst_a === class_inst_a
    test["class !=="].pass = class_inst_a !== class_inst_b
    test["identity_digest_of class !="].pass =
      (identity_digest_of class_inst_a) != (identity_digest_of class_inst_b)
    test["identity_digest_of class =="].pass =
      (identity_digest_of class_inst_a) == (identity_digest_of class_inst_a)

    struct_inst_a = ContainerStruct(String).new("example")
    struct_inst_b = ContainerStruct(String).new("example")
    struct_inst_c = ContainerStruct(String).new("differs")
    test["struct ==="].pass = struct_inst_a === struct_inst_b
    test["struct !=="].pass = struct_inst_a !== struct_inst_c
    test["identity_digest_of struct =="].pass =
      (identity_digest_of struct_inst_a) == (identity_digest_of struct_inst_b)
    test["identity_digest_of struct !="].pass =
      (identity_digest_of struct_inst_a) != (identity_digest_of struct_inst_c)
