:: This internal struct can represent any value representable by the F64 type,
:: but the information is represented in a form that is more convenient for
:: printing/formatting, with special cases broken out into separate booleans,
:: and numeric values being represented via powers of 10 instead of powers of 2.
:struct val _FormattableF64
  :let significand U64
  :let power_of_10 I16
  :let digit_count U8
  :let is_negative Bool
  :let is_finite_non_zero Bool
  :let is_zero Bool
  :let is_nan Bool

  :fun non from_f64(value F64)
    case (
    | value.is_zero |
      @_zero(value.has_negative_sign_bit)

    | value.is_finite |
      ryu = _Ryu.F64.to_base_10(value.significand_with_base_2_exponent)
      @_finite_non_zero(ryu.first, ryu.second, value.has_negative_sign_bit)

    | value.is_nan |
      @_nan

    |
      @_infinity(value.has_negative_sign_bit)
    )

  :new val _finite_non_zero(
    @significand
    @power_of_10
    @is_negative
  )
    @digit_count = @_calculate_digit_count(@significand)
    @is_finite_non_zero = True
    @is_zero = False
    @is_nan = False

  :new val _zero(@is_negative)
    @significand = 0
    @power_of_10 = 0
    @digit_count = 1
    @is_finite_non_zero = False
    // (@is_negative is assigned via parameter)
    @is_zero = True
    @is_nan = False

  :new val _nan
    @significand = 0
    @power_of_10 = 0
    @digit_count = 0
    @is_negative = False
    @is_finite_non_zero = False
    @is_zero = False
    @is_nan = True

  :new val _infinity(@is_negative)
    @significand = 0
    @power_of_10 = 0
    @digit_count = 0
    @is_finite_non_zero = False
    // (@is_negative is assigned via parameter)
    @is_zero = False
    @is_nan = False

  :: Return the maxmium number of bytes that may be needed to emit the
  :: stored value into a string buffer, in the event that it is one
  :: of the "special cases" (i.e. that it is not a finite non-zero value).
  ::
  :: If the value `is_finite_non_zero`, an error will be raised.
  :fun _special_case_as_string! String
    case (
    | @is_finite_non_zero | error!
    | @is_zero            | if @is_negative ("-0.0" | "0.0")
    | @is_nan             | "NaN"
    |                       if @is_negative ("-Infinity" | "Infinity")
    )

  :: Given a significand, determine the number of base-10 digits in it.
  :fun non _calculate_digit_count(significand U64)
    // First get a possibly overestimated digit count based on the bit count.
    digit_count = @_overestimated_digit_count(significand.significant_bits)

    // Check the divisor for that digit count against the significand.
    // If the divisor is too big, we need to reduce the digit count by one.
    divisor = try (@_powers_of_10[(digit_count - 1).usize]! | 10)
    if significand < divisor (digit_count -= 1)

    // Return the now-accurate digit count.
    digit_count

  :: For this value's digit count, get the appropriate starting divisor.
  :fun initial_divisor U64
    try (@_powers_of_10[(@digit_count - 1).usize]! | 1)

  :: For this value's digit count and power of 10, get the appropriate exponent
  :: to use when printing with scientific notation.
  :fun scientific_exponent I16
    // The final exponent is adjusted based on the digit count, because the
    // more digits we are printing, the more we need to shift the decimal
    // point from its initial position at the far right of the significand.
    @power_of_10 + @digit_count.i16 - 1

  :: Return a number which is greater than or equal to the number of base-10
  :: digits needed to represent the given value (which must be positive).
  :: This approximation will always be either exactly correct (as it is for the
  :: majority of possible numbers), or one higher than the correct digit count.
  :fun non _overestimated_digit_count(bit_count U8) U8
    // Take the number of significant bits, multiply by (77 / 256), then add 1.
    // This approximation is valid for up to 128 significant bits, and will not
    // overflow 16-bit intermediate computation, because 128 * 77 uses 14 bits.
    // Note that shifting by 8 bits is equivalent to floored division by 256.
    (bit_count.u16 * 77).bit_shr(8).u8 + 1

  :: All of the powers of 10 that are representable by the `U64` type,
  :: where the index of this table is used as the exponent of 10.
  :const _powers_of_10 Array(U64)'val: [
    1
    10
    100
    1000
    10000
    100000
    1000000
    10000000
    100000000
    1000000000
    10000000000
    100000000000
    1000000000000
    10000000000000
    100000000000000
    1000000000000000
    10000000000000000
    100000000000000000
    1000000000000000000
    10000000000000000000
  ]


:: Format the given floating point using one of the available format types.
:: Call one of the methods of this struct to choose which format type to use.
:struct val FloatingPoint.Format(T FloatingPoint(T)'val)
  :let _value _FormattableF64
  :new val _new(@_value)

  :fun shortest: FloatingPoint.Format.Shortest(T)._new(@_value)
  :fun scientific: FloatingPoint.Format.Scientific(T)._new(@_value)
  :fun without_exponent: FloatingPoint.Format.WithoutExponent(T)._new(@_value)

:: Format the given floating-point using the shortest number of characters,
:: either with or without an exponent indicator (i.e. scientific notation).
:struct val FloatingPoint.Format.Shortest(T FloatingPoint(T)'val)
  :is IntoString

  :let _value _FormattableF64
  :new val _new(@_value)

  :fun into_string_space USize
    if @_value.power_of_10 > 2 || @_value.scientific_exponent < -3 (
      FloatingPoint.Format.Scientific(T)._new(@_value).into_string_space
    |
      FloatingPoint.Format.WithoutExponent(T)._new(@_value).into_string_space
    )

  :fun into_string(out String'ref) None
    if @_value.power_of_10 > 2 || @_value.scientific_exponent < -3 (
      FloatingPoint.Format.Scientific(T)._new(@_value).into_string(out)
    |
      FloatingPoint.Format.WithoutExponent(T)._new(@_value).into_string(out)
    )

:: Format the given floating-point with an exponent (i.e. scientific notation).
:struct val FloatingPoint.Format.Scientific(T FloatingPoint(T)'val)
  :is IntoString

  :let _value _FormattableF64
  :new val _new(@_value)

  :fun into_string_space USize
    // First, deal with any special cases (zero or non-finite numbers).
    // We count these in a special (hard-coded) way and return early.
    try (size = @_value._special_case_as_string!.size, return size)

    // Start with the number of significant digits that will be printed.
    byte_count = @_value.digit_count

    // Account for the decimal point byte, as well as the trailing zero in the
    // case of no significand digits being to the right of the decimal point.
    byte_count = (byte_count + 1).at_least(2)

    // Account for the negative symbol if present.
    if @_value.is_negative (byte_count += 1)

    // Account for the exponent, which will have an 'e' as well as a number.
    byte_count.usize
    + 1
    + @_value.scientific_exponent.format.decimal.into_string_space

  :fun into_string(out String'ref) None
    // First, deal with any special cases (zero or non-finite numbers).
    // We print these in a special (hard-coded) way and return early.
    try (out << @_value._special_case_as_string!, return)

    significand = @_value.significand
    digit_count = @_value.digit_count
    divisor = @_value.initial_divisor
    exponent = @_value.scientific_exponent

    // If negative, we need to print a negative symbol.
    if @_value.is_negative out.push_byte('-')

    // Print the digits of the significand, with the decimal point.
    digit_count.times -> (digit_index |
      out.push_byte((significand / divisor % 10).u8 + '0')
      if digit_index.is_zero out.push_byte('.')
      divisor = divisor / 10
    )
    if digit_count == 1 out.push_byte('0')

    // Print the base-10 exponent suffix.
    if exponent.is_nonzero (
      out.push_byte('e')
      exponent.into_string(out)
    )

:: Format the given floating-point with no exponent (no scientific notation).
:struct val FloatingPoint.Format.WithoutExponent(T FloatingPoint(T)'val)
  :is IntoString

  :let _value _FormattableF64
  :new val _new(@_value)

  :fun into_string_space USize
    // First, deal with any special cases (zero or non-finite numbers).
    // We count these in a special (hard-coded) way and return early.
    try (size = @_value._special_case_as_string!.size, return size)

    // Start with the number of significant digits that will be printed.
    byte_count = @_value.digit_count.usize

    // Account for the decimal point byte and the negative symbol (if present).
    byte_count += if @_value.is_negative (2 | 1)

    // Account for the leading zeros if present.
    try (byte_count += (
      I16.one - @_value.power_of_10 - @_value.digit_count.i16
    ).usize!)

    // Account for trailing zeros if present.
    try (byte_count += @_value.power_of_10.usize!.at_least(1))

    byte_count

  :fun into_string(out String'ref) None
    // First, deal with any special cases (zero or non-finite numbers).
    // We print these in a special (hard-coded) way and return early.
    try (out << @_value._special_case_as_string!, return)

    significand = @_value.significand
    digit_count = @_value.digit_count
    divisor = @_value.initial_divisor
    exponent = @_value.scientific_exponent

    // If the value is negative, print a negative symbol.
    if @_value.is_negative out.push_byte('-')

    // If the exponent is negative, print with extra zeros in front,
    // including the decimal point after the first zero is printed.
    exponent_is_negative = exponent < 0
    if exponent_is_negative (
      exponent.negate.times -> (digit_index |
        out.push_byte('0')
        if digit_index.is_zero out.push_byte('.')
      )
    )

    // Print the digits of the significand, with decimal point if applicable.
    digit_count.times -> (digit_index |
      if digit_index.i16 - 1 == exponent && digit_index > 0 out.push_byte('.')
      out.push_byte((significand / divisor % 10).u8 + '0')
      divisor = divisor / 10
    )

    // Print trailing zeros if the exponent raises us beyond the number
    // of significant digits we already printed.
    try (
      trailing_zeros = @_value.power_of_10.u16!
      trailing_zeros.times -> (out.push_byte('0'))
      out.push_byte('.')
      out.push_byte('0')
    )
